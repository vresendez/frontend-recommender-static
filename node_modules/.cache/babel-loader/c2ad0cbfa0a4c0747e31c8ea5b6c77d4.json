{"ast":null,"code":"import _toConsumableArray from \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chatbot/Chatbot.js\";\nimport React, { useState } from 'react';\nimport ChatbotInput from './Chat/ChatbotInput';\nimport ChatbotMessage from './Chat/ChatbotMessage';\nimport '../styles/Chatbot.css';\nimport { mockData } from '../mockData'; // Import the mock data\n\nvar Chatbot = function Chatbot(_ref) {\n  var selectedCategories = _ref.selectedCategories;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    filteredNewsData = _useState4[0],\n    setFilteredNewsData = _useState4[1];\n  var handleUserMessage = function handleUserMessage(message) {\n    // Check if the user is asking for specific news items\n    if (message.toLowerCase().includes('technology')) {\n      var requestedCategory = selectedCategories.find(function (category) {\n        return message.toLowerCase().includes(category.toLowerCase());\n      });\n      if (requestedCategory) {\n        filterNewsData(requestedCategory);\n      }\n    }\n  };\n  var handleButtonClick = function handleButtonClick(category) {\n    filterNewsData(category);\n  };\n  var handleSendMessage = function handleSendMessage(message) {\n    // Add user's message to chat\n    setMessages([].concat(_toConsumableArray(messages), [{\n      content: message,\n      isUser: true\n    }]));\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([].concat(_toConsumableArray(messages), [{\n      content: message,\n      isUser: true\n    }, {\n      content: 'Hello, I am your chatbot!',\n      isUser: false\n    }]));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"category-buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, selectedCategories.map(function (category) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: category,\n      onClick: function onClick() {\n        return handleButtonClick(category);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, category);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, messages.map(function (msg, index) {\n    return /*#__PURE__*/React.createElement(ChatbotMessage, {\n      key: index,\n      message: msg.content,\n      isUser: msg.isUser,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    });\n  })), /*#__PURE__*/React.createElement(ChatbotInput, {\n    onSendMessage: handleSendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filtered-news\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, filteredNewsData.map(function (article) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: article.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, article.title), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, article.content));\n  })));\n};\nexport default Chatbot;","map":{"version":3,"names":["React","useState","ChatbotInput","ChatbotMessage","mockData","Chatbot","_ref","selectedCategories","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","filteredNewsData","setFilteredNewsData","handleUserMessage","message","toLowerCase","includes","requestedCategory","find","category","filterNewsData","handleButtonClick","handleSendMessage","concat","_toConsumableArray","content","isUser","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","onClick","msg","index","onSendMessage","article","id","title"],"sources":["/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatbotInput from './Chat/ChatbotInput';\nimport ChatbotMessage from './Chat/ChatbotMessage';\nimport '../styles/Chatbot.css';\nimport { mockData } from '../mockData';  // Import the mock data\n\nconst Chatbot = ({ selectedCategories }) => {\n  const [messages, setMessages] = useState([]);\n  const [filteredNewsData, setFilteredNewsData] = useState([]);\n\n  const handleUserMessage = (message) => {\n    // Check if the user is asking for specific news items\n    if (message.toLowerCase().includes('technology')) {\n      const requestedCategory = selectedCategories.find(category =>\n        message.toLowerCase().includes(category.toLowerCase())\n      );\n      if (requestedCategory) {\n        filterNewsData(requestedCategory);\n      }\n    }\n  };\n  const handleButtonClick = (category) => {\n    filterNewsData(category);\n  };\n  const handleSendMessage = (message) => {\n    // Add user's message to chat\n    setMessages([...messages, { content: message, isUser: true }]);\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([...messages, \n      { content: message, isUser: true },\n      { content: 'Hello, I am your chatbot!', isUser: false }\n    ]);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"category-buttons\">\n        {selectedCategories.map(category => (\n          <button key={category} onClick={() => handleButtonClick(category)}>\n            {category}\n          </button>\n        ))}\n      </div>\n      <div className=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <ChatbotMessage key={index} message={msg.content} isUser={msg.isUser} />\n        ))}\n        \n      </div>\n      \n      <ChatbotInput onSendMessage={handleSendMessage} />\n      <div className=\"filtered-news\">\n        {filteredNewsData.map(article => (\n          <div key={article.id}>\n            <h2>{article.title}</h2>\n            <p>{article.content}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}