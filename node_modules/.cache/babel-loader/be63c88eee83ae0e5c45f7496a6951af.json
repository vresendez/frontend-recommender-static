{"ast":null,"code":"import _toConsumableArray from \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chatbot/Chatbot.js\";\nimport React, { useState } from 'react';\nimport ChatbotInput from './Chat/ChatbotInput';\nimport ChatbotMessage from './Chat/ChatbotMessage';\nimport '../styles/Chatbot.css';\nfunction Chatbot() {\n  var _this = this;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var handleSendMessage = function handleSendMessage(message) {\n    // Add user's message to chat\n    setMessages([].concat(_toConsumableArray(messages), [{\n      content: message,\n      isUser: true\n    }]));\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([].concat(_toConsumableArray(messages), [{\n      content: message,\n      isUser: true\n    }, {\n      content: 'Hello, I am your chatbot!',\n      isUser: false\n    }]));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, messages.map(function (msg, index) {\n    return /*#__PURE__*/React.createElement(ChatbotMessage, {\n      key: index,\n      message: msg.content,\n      isUser: msg.isUser,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    });\n  })), /*#__PURE__*/React.createElement(ChatbotInput, {\n    onSendMessage: handleSendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n}\nexport default Chatbot;","map":{"version":3,"names":["React","useState","ChatbotInput","ChatbotMessage","Chatbot","_this","_useState","_useState2","_slicedToArray","messages","setMessages","handleSendMessage","message","concat","_toConsumableArray","content","isUser","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","key","onSendMessage"],"sources":["/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatbotInput from './Chat/ChatbotInput';\nimport ChatbotMessage from './Chat/ChatbotMessage';\nimport '../styles/Chatbot.css';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n\n  const handleSendMessage = (message) => {\n    // Add user's message to chat\n    setMessages([...messages, { content: message, isUser: true }]);\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([...messages, \n      { content: message, isUser: true },\n      { content: 'Hello, I am your chatbot!', isUser: false }\n    ]);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <ChatbotMessage key={index} message={msg.content} isUser={msg.isUser} />\n        ))}\n      </div>\n      <ChatbotInput onSendMessage={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAO,uBAAuB;AAE9B,SAASC,OAAOA,CAAA,EAAG;EAAA,IAAAC,KAAA;EAAA,IAAAC,SAAA,GACeL,QAAQ,CAAC,EAAE,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,OAAO,EAAK;IACrC;IACAF,WAAW,IAAAG,MAAA,CAAAC,kBAAA,CAAKL,QAAQ,IAAE;MAAEM,OAAO,EAAEH,OAAO;MAAEI,MAAM,EAAE;IAAK,CAAC,EAAC,CAAC;;IAE9D;IACA;IACAN,WAAW,IAAAG,MAAA,CAAAC,kBAAA,CAAKL,QAAQ,IACtB;MAAEM,OAAO,EAAEH,OAAO;MAAEI,MAAM,EAAE;IAAK,CAAC,EAClC;MAAED,OAAO,EAAE,2BAA2B;MAAEC,MAAM,EAAE;IAAM,CAAC,EACxD,CAAC;EACJ,CAAC;EAED,oBACEhB,KAAA,CAAAiB,aAAA;IAAKC,SAAS,EAAC,SAAS;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtBxB,KAAA,CAAAiB,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3Bf,QAAQ,CAACgB,GAAG,CAAC,UAACC,GAAG,EAAEC,KAAK;IAAA,oBACvB3B,KAAA,CAAAiB,aAAA,CAACd,cAAc;MAACyB,GAAG,EAAED,KAAM;MAACf,OAAO,EAAEc,GAAG,CAACX,OAAQ;MAACC,MAAM,EAAEU,GAAG,CAACV,MAAO;MAAAG,MAAA,EAAAd,KAAA;MAAAe,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC;EAAA,CACzE,CACE,CAAC,eACNxB,KAAA,CAAAiB,aAAA,CAACf,YAAY;IAAC2B,aAAa,EAAElB,iBAAkB;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAC9C,CAAC;AAEV;AAEA,eAAepB,OAAO"},"metadata":{},"sourceType":"module"}