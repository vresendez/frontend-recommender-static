{"ast":null,"code":"var _jsxFileName = \"/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chat/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ChatbotInput from './ChatbotInput';\nimport ChatbotMessage from './ChatbotMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const handleSendMessage = message => {\n    // Add user's message to chat\n    setMessages([...messages, {\n      content: message,\n      isUser: true\n    }]);\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([...messages, {\n      content: message,\n      isUser: true\n    }, {\n      content: 'Hello, I am your chatbot!',\n      isUser: false\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatbotMessage, {\n        message: msg.content,\n        isUser: msg.isUser\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","ChatbotInput","ChatbotMessage","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","handleSendMessage","message","content","isUser","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/valeria/Desktop/phd/TYP/ScrapperNieuws/chatbot-interface/src/components/Chat/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatbotInput from './ChatbotInput';\nimport ChatbotMessage from './ChatbotMessage';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n\n  const handleSendMessage = (message) => {\n    // Add user's message to chat\n    setMessages([...messages, { content: message, isUser: true }]);\n\n    // After sending a message, you can add logic here to get a response from a chatbot API.\n    // For now, let's just add a dummy reply.\n    setMessages([...messages, \n      { content: message, isUser: true },\n      { content: 'Hello, I am your chatbot!', isUser: false }\n    ]);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <ChatbotMessage key={index} message={msg.content} isUser={msg.isUser} />\n        ))}\n      </div>\n      <ChatbotInput onSendMessage={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,iBAAiB,GAAIC,OAAO,IAAK;IACrC;IACAF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEI,OAAO,EAAED,OAAO;MAAEE,MAAM,EAAE;IAAK,CAAC,CAAC,CAAC;;IAE9D;IACA;IACAJ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EACtB;MAAEI,OAAO,EAAED,OAAO;MAAEE,MAAM,EAAE;IAAK,CAAC,EAClC;MAAED,OAAO,EAAE,2BAA2B;MAAEC,MAAM,EAAE;IAAM,CAAC,CACxD,CAAC;EACJ,CAAC;EAED,oBACER,OAAA;IAAKS,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBV,OAAA;MAAKS,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3BP,QAAQ,CAACQ,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBb,OAAA,CAACF,cAAc;QAAaQ,OAAO,EAAEM,GAAG,CAACL,OAAQ;QAACC,MAAM,EAAEI,GAAG,CAACJ;MAAO,GAAhDK,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6C,CACxE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNjB,OAAA,CAACH,YAAY;MAACqB,aAAa,EAAEb;IAAkB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAACf,EAAA,CAzBQD,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AA2BhB,eAAeA,OAAO;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}